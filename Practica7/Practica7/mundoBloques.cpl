;; Templates
(deftemplate goal
    (slot move)
    (slot on-top-of))

;; Mueve un cubo sobre otro
(defrule move-directly
  ?goal <- (goal (move ?block1) (on-top-of ?block2))
  (block ?block1)
  (block ?block2)
  ;;Cosas que necesitamos
  (stack ?primero ?block1 $?resto1)
  (stack ?segundo ?block2 $?resto2)
  =>
  (retract ?goal)
  (assert 
   ;;Condiciones para el pop 
   (pop-value ?primero)
   ;;Condiciones para el push
   (push-value ?segundo ?block1))
  (printout t ?block1 " moved on top of " ?block2 crlf))

;; Mueve un cubo al suelo
(defrule move-to-floor
  ?goal <- (goal (move ?block1) (on-top-of floor))
  (block ?block1)
  ;;Cosas que necesitamos
  (stack ?pila ?block1 $?resto)
  =>
  (retract ?goal)
  (assert 
   (pop-value ?pila))
  (printout t ?block1 " moved on top of floor" crlf))

;; Agrega la meta requerida: quitar el cubo arriba del cubo que quiero mover
(defrule clear-upper-block
  (goal (move ?block1))
  (block ?block1)
;; Entre son los bloques entre el tope y el que queremos quitar
  (stack ?pila ?block2 $?entre ?block1 $?rest)
  (block ?block2)
  =>
  (assert (goal (move ?block2) (on-top-of floor))))

;; Agrega la meta requerida: quitar el cubo arriba del cubo sobre el que 
;; colocarÃ© otro.
(defrule clear-lower-block
  (goal (on-top-of ?block1))
  (block ?block1)
  (stack ?pila ?block2 $?entre ?block1 $?otros)
  (block ?block2)
  =>
  (assert (goal (move ?block2) (on-top-of floor))))

(deffacts initial-state
  (block A) (block B)
  (block C) (block D)
  (block E) (block F)
  (stack pila1 A B C)
  (stack pila2 D E F)
  (goal (move C) (on-top-of E))
)